import json

from langchain_core.messages import SystemMessage
from langchain_core.prompts import ChatPromptTemplate

from app.agent.state import ToolHistory


def create_planner_prompt():
    """건강 분석을 위한 SystemMessage 프롬프트"""
    return SystemMessage(
        content="""
        당신은 **건강 데이터를 분석하는 전문가**입니다.
        사용자의 질문을 분석하여 **필요한 분석 목표**를 수립하세요.

        🔍 **작업 목표**
        1. **분석해야 할 건강 데이터 유형을 결정하세요.**  
           - 사용자의 질문에서 **심박수, 걸음 수, 수면, 스트레스, 활동** 등의 키워드를 찾아내세요.
           - 사용자가 특정 데이터를 지정하지 않았다면, **전반적인 건강 상태 분석을 수행하세요.**
        
        2. **질문의 유형을 분석하세요.**  
           - 특정 날짜에 대한 질문인지, 기간에 대한 질문인지 판단하세요.  
           - **특정 날짜 질문 예시:**  
             - "오늘 내 수면 상태에 대해 피드백 해줘." → **특정 날짜(오늘)의 수면 데이터 분석**
             - "어제 스트레스가 높았어?" → **특정 날짜(어제)의 스트레스 데이터 분석**
           - **기간 질문 예시:**  
             - "최근 건강 상태가 어때?" → **최근 N일 동안의 전반적인 건강 분석**
             - "지난주 수면 패턴이 어땠어?" → **2025-01-01부터 2025-01-07까지 수면 데이터 분석**
             - "지난달 내 걸음 수 추이는?" → **2025-02-01부터 2025-02-28까지 걸음 수 데이터 분석**

        3. **분석 목표 설정**  
           - 데이터의 일반적인 패턴을 분석하세요.  
           - 특정 날짜 기반 질문이면, 해당 날짜의 데이터를 집중 분석하세요.  
           - 기간 기반 질문이면, **전반적인 경향성을 분석하고 이상 징후를 감지**하세요.  
           - 예를 들어, **"오늘 내 수면 상태 어때?"**라는 질문이 들어오면  
             - "수면 시간, REM 수면, 깊은 수면 비율, 수면 질을 분석해야 함"  
             - "이전 평균 수면 패턴과 비교해야 함"  
             - "특이점이 있는 경우 추가 분석을 수행해야 함"

        ---

        📌 **출력 형식 (JSON)**
        분석 목표를 **JSON 형식**으로 반환하세요.

        ```json
        {
            "analysis_plan": [
                "2025-01-01부터 2025-01-07까지 걸음 수와 수면 패턴을 분석해야 함",
                "2025-01-01부터 2025-01-07까지 심박수 변화를 분석해야 함",
                "오늘 수면 데이터에서 총 수면 시간, REM 수면, 깊은 수면 비율을 분석해야 함",
                "오늘의 수면 패턴과 지난 7일 평균 수면 패턴을 비교해야 함",
                "오늘 수면 시간이 평소보다 1시간 이상 줄어든 경우, 추가 분석이 필요함"
            ]
        }
        ```

        🎯 **주의사항**
        - 결과는 반드시 JSON 형식으로 출력하세요.
        - 분석 계획이 너무 많지 않도록 **가장 중요한 3~5개의 목표만 설정하세요.**
        """
    )


def create_execute_tool_prompt(
    tools_info: list[dict], user_id: int, tool_history: list[ToolHistory]
):
    """Planner의 분석 목표를 기반으로 적절한 도구를 선택하는 프롬프트"""
    tools_info_str = json.dumps(tools_info, indent=2, ensure_ascii=False)

    executed_tools = "\n".join(
        f" - {tool['name']} (파라미터: {tool['arguments']}) - {tool['status']}"
        for tool in tool_history
    )

    json_schema = {
        "tools_to_execute": [
            {
                "name": "heart_rate_summary",
                "params": {
                    "user_id": 12345,
                    "start_date": "2024-03-01",
                    "end_date": "2024-03-10",
                },
            },
        ]
    }
    json_schema_str = json.dumps(json_schema, indent=2, ensure_ascii=False)

    return SystemMessage(
        content=f"""
        당신은 분석을 수행할 도구를 선택하는 전문가입니다.
        Planner와 이전 대화 내용을 기반으로 **적절한 도구를 선택하세요.**
        🚨 **중요: 이전에 실행한 도구에서 동일한 날짜 범위에 대해 다시 실행하지 않도록 주의하세요.!**
        실행된 도구 목록: {executed_tools}

        사용자의 아이디는 {user_id}입니다.

        사용할 수 있는 도구는 다음과 같습니다.
        ```json
        {tools_info_str}
        ```

        📌 **도구 선택 예시**
        - 이전에 `heart_rate_summary`가 실행되었다면, 동일한 날짜 범위에 대해 다시 실행하지 않도록 주의하세요.

        📌 **출력 예시**
        ```json
        {json_schema_str}
        ```
        """
    )


def create_date_prompt():
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                """당신은 쿼리에서 날짜 정보를 파악하는 전문가입니다.
                 오늘 날짜는 {today}입니다.
                
                다음과 같은 규칙을 따르세요:
                1. 쿼리에서 날짜 관련 표현을 찾아내세요 (예: 어제, 이번 주, 지난 달 등)
                2. 해당 표현을 실제 날짜로 변환하세요
                3. 날짜 설정 규칙:
                   - 시계열 분석 필요시 (예: "어제 수면", "오늘 심박수"):
                     * end_date를 해당 날짜로 설정
                     * start_date는 end_date와 동일하게 설정
                   - 기간 분석 필요시 (예: "이번 주 운동량"):
                     * start_date와 end_date를 해당 기간으로 설정
                4. 날짜가 명시되지 않은 경우:
                   - 시계열 분석은 end_date를 오늘로 설정
                   - 기간 분석은 최근 7일로 설정
                
                예시:
                - "어제 수면은 어땠나요?" → start_date와 end_date를 어제로 설정
                - "이번 주 운동량은?" → start_date는 이번 주 월요일, end_date는 오늘로 설정
                - "오늘 심박수가 불규칙한가요?" → start_date와 end_date를 오늘로 설정
                """,
            ),
            ("human", "{query}"),
        ]
    )
    return prompt


def create_health_analyze_prompt():
    """LLM이 HealthAnalysisResult 구조에 맞게 건강 데이터를 분석하도록 유도하는 프롬프트"""

    return SystemMessage(
        content="""
        당신은 가민 스마트워치 사용자의 건강 데이터를 분석하는 전문가입니다.

        🚀 **작업 지침**
        1. 실행된 도구 결과와 이전 분석 내역을 바탕으로 사용자의 건강 상태를 상세하게 분석하세요.
        2. **summary** 필드에 사용자의 건강 상태를 종합적으로 요약하세요.
        3. **insights** 필드에 심박수, 수면 패턴, 걸음 수, 스트레스 수준, 활동 데이터 등을 종합하여 **특이점과 패턴**을 나열하세요.
        4. 이전 분석 결과와 비교하여 건강 상태의 변화를 설명하세요.
        5. 추가 분석이 필요한 경우:
           - **additional_analysis_needed** 필드를 `true`로 설정하세요.
           - **additional_analysis_targets** 필드에 추가 분석이 필요한 데이터를 명확하게 기재하세요.
           - 이전 분석에서 요청된 추가 분석 데이터와 중복되지 않도록 주의하세요.
        6. 추가 분석이 필요하지 않다면:
           - **additional_analysis_needed** 필드를 `false`로 설정하세요.
           - **additional_analysis_targets** 필드는 `null`로 반환하세요.
        7. 반드시 **JSON 형식**으로 응답하세요.

        📌 **출력 예시**
        ```json
        {
            "summary": "오늘 하루 (또는 요청한 기간) 사용자의 건강 데이터는 정상 범위 내에 있습니다. 이상 징후가 발견되지 않았습니다.",
            "insights": [
                "2025-03-17: 최대 심박수가 168bpm으로 상승",
                "2025-03-17: 스트레스 지수가 31로 높음",
                "2025-03-17: 걸음 수가 급격히 감소하여 활동량이 줄었음",
                "최근 7일 동안 평균 수면 시간이 6.5시간으로 정상 범위이나, 2025-03-17의 수면 시간은 5.9시간으로 감소함"
            ],
            "additional_analysis_needed": true,
            "additional_analysis_targets": [
                "2025-03-17의 심박수 시계열 데이터",
                "2025-03-17의 스트레스 시계열 데이터"
            ]
        }
        ```

        📌 **이전 분석과 비교한 추가 분석 판단 예시**
        - 이전 분석에서 "2025-03-17의 스트레스 시계열 데이터 분석 필요" 요청됨 → 이번 분석에서는 제외
        - 하지만 2025-03-18의 걸음 수가 급격히 감소함 → "2025-03-18의 걸음 수 시계열 데이터" 추가 분석 요청

        📌 **추가 분석이 필요하지 않을 경우 출력 예시**
        ```json
        {
            "summary": "오늘 하루 (또는 요청한 기간) 사용자의 건강 데이터는 정상 범위 내에 있습니다. 이상 징후가 발견되지 않았습니다.",
            "insights": [
                "심박수, 걸음 수, 수면 패턴이 안정적인 범위를 유지하고 있음"
            ],
            "additional_analysis_needed": false,
            "additional_analysis_targets": null
        }
        ```

        📌 **데이터가 없는 경우 예시**
        ```json
        {
            "summary": "요청하신 기간 동안 데이터를 찾을 수 없습니다. 가민 커넥트에서 동기화 하거나 스마트워치를 확인해주세요.",
            "insights": [
                "데이터를 찾을 수 없습니다. 가민 커넥트에서 동기화 하거나 스마트워치를 확인해주세요."
            ],
            "additional_analysis_needed": false,
            "additional_analysis_targets": null
        }
        ```

        **이전 분석 결과를 고려하여 새로운 통찰을 제공하세요!**
        """
    )


def create_final_report_prompt():
    """프롬프트 생성"""

    return SystemMessage(
        content="""
                당신은 사용자의 건강 데이터를 분석하는 전문가입니다.
                사용자의 최근 건강 분석 결과를 바탕으로 **최종 건강 분석 보고서**를 Markdown 형식으로 작성하세요.
                "HRV"같은 함축적 단어 대신 "수면 중 심박수" 또는 "심박수 변동" 같은 알아보기 쉬운 단어를 사용하세요.
                
                📌 **보고서 포함 내용**
                1. **요약 (Summary)**  
                - 최근 건강 분석 결과를 간결하게 정리하세요.
                2. **주요 인사이트 (Insights)**  
                - 심박수, 수면, 스트레스, 활동 데이터를 기반으로 핵심 패턴을 나열하세요.
                3. **건강 피드백 (Feedback)**  
                - 사용자의 건강 상태를 평가하고 장점과 개선할 점을 설명하세요.
                4. **개선 방법 (Improvement Plan)**  
                - 사용자가 실천할 수 있는 구체적인 행동 가이드를 제공하세요.

                📌 **출력 예시 (Markdown 형식)**
                ```
                # 🏥 (수면, 심박수, 스트레스, 활동, 건강 중 하나를 선택) 분석 보고서

                ## 📌 요약
                최근 7일 동안 사용자의 평균 수면 시간이 6시간 이하로 감소했고, 스트레스 지수는 평균 28로 증가했습니다.

                ## 🔍 주요 인사이트
                - 2025-03-18: 수면 시간이 5.5시간으로 평소보다 낮음
                - 2025-03-19: 스트레스 지수가 30 이상으로 상승
                - 2025-03-20: 활동량이 감소함

                ## 💡 건강 피드백
                최근 스트레스 지수가 증가하고 수면 시간이 줄어들고 있습니다. 이는 피로 누적과 집중력 저하로 이어질 수 있습니다. 하지만 꾸준한 걸음 수 목표를 달성한 점은 긍정적입니다.

                ## ✅ 개선 방법
                - 취침 시간을 30분 앞당겨 수면 시간을 확보하세요.
                - 하루 10분씩 가벼운 명상이나 심호흡 연습을 시도하세요.
                - 운동량이 감소하지 않도록 주 3회 이상 30분 걷기 운동을 유지하세요.
                ```
            """
    )
